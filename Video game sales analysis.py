# -*- coding: utf-8 -*-
"""BUINT Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14dMUmANwVU1rqBKOtvYHx84_soKLUS8p

# BUINT Project
Analyzing stuff

## Importing Libraries
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, accuracy_score

"""# Importing the data

Cleaning the data with the following requirements:
- Global sales greater than or equal to 1 million
- Game released no earlier than 2001
- The game's platform needs to have at least 10 sales
"""

# Loading dataset 1 (hidde)
dataset_hidde = pd.read_csv('vgsales-12-4-2019.csv')

# Cleaning the data and writing to output file
hidde_clean = dataset_hidde[(dataset_hidde['Global_Sales'] >= 1.0) & (dataset_hidde['Year'] > 2000)][['Name', 'Platform', 'Genre', 'Global_Sales', 'Publisher', 'Year']]
platform_counts = hidde_clean['Platform'].value_counts()
hidde_clean = hidde_clean[hidde_clean['Platform'].isin(platform_counts[platform_counts > 10].index)]
hidde_clean.to_csv('hidde-clean.csv', index=False)

# Loading dataset 2 (shubham)
df = pd.read_csv('vgsales.csv')

#Data cleaning
shubham_clean = df[(df['Year'] > 2000) & (df['Global_Sales'] >= 1.0)][['Name', 'Platform', 'Genre', 'Global_Sales', 'Publisher', 'Year']]
df_platform_counts = shubham_clean['Platform'].value_counts()
shubham_clean = shubham_clean[shubham_clean['Platform'].isin(df_platform_counts[df_platform_counts > 10].index)]
shubham_clean.to_csv('shubham-clean.csv', index= False)

"""# Merging the data
The data needs to be merged keeping in mind the following items:
- Check if item exists in Shubham's dataset, if not then add from Hidde
- Did a value change? Use Hidde's dataset as a base since it is more up-to-date

"""

# Merge the two datasets
merged_df = pd.merge(hidde_clean, shubham_clean, on=['Name', 'Platform', 'Genre', 'Publisher'], how='outer', suffixes=('_hidde', '_shubham'))
# If 'Global_Sales' is different, use the value from 'hidde_clean'
merged_df['Global_Sales'] = merged_df['Global_Sales_hidde'].combine_first(merged_df['Global_Sales_shubham'])
# If 'Year' is different, use the value from 'hidde_clean', and round to integer
merged_df['Year'] = merged_df['Year_hidde'].combine_first(merged_df['Year_shubham']).round(0).astype(int)
# Keep only the necessary columns
merged_df = merged_df[['Name', 'Platform', 'Genre', 'Global_Sales', 'Publisher', 'Year']]
# Remove duplicates
merged_df = merged_df.drop_duplicates(subset=['Name', 'Platform'])
# Rank by 'Global_Sales'
merged_df = merged_df.sort_values(by='Global_Sales', ascending=False)
# Write the merged data to a new CSV file
merged_df.to_csv('merged-clean.csv', index=False)

"""# Descriptive
Predictive analysis to answer the question:
What game genre sells the most on the PS4 on average?

From the results we see that shooters get the most sales with an average of 4.6 million sales.
"""

merged_df = pd.read_csv('merged-clean.csv')
# Calculate the average sales per genre per platform
avg_sales = merged_df[merged_df['Platform'] == 'PS4'].groupby('Genre')['Global_Sales'].mean()
# Convert the Series to a DataFrame, limit the number of decimals to 2
avg_sales = avg_sales.round(2).to_frame()
avg_sales = avg_sales.reset_index()

# Sort and get the top 5 platforms per genre
top_platforms = avg_sales.sort_values('Global_Sales', ascending=False).groupby('Genre').head(5)
# top_genres = avg_sales.nlargest(3, 'Global_Sales')
# print(top_genres)

# Create a bar plot
plt.figure(figsize=(10, 6))
barplot = sns.barplot(x='Global_Sales', y='Genre', data=avg_sales, errorbar=None)

# Display the values
for p in barplot.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height() / 2, '{:1.2f}'.format(width), va='center')

plt.xlabel('Average Sales (in millions)')
plt.ylabel('Genre')
plt.title('Average sales per genre on PS4')
plt.show()

# Filter the data for a specific platform, e.g., 'PS4'
platform_games = merged_df[merged_df['Platform'] == 'PS4']

# Create a boxplot
plt.figure(figsize=(10, 6))
sns.boxplot(x='Genre', y='Global_Sales', data=platform_games)

# Show the amount of data points per genre
sns.swarmplot(x='Genre', y='Global_Sales', data=platform_games, color=".25")

plt.title('Boxplot of Average Sales per Genre on Xbox')
plt.xlabel('Genre')
plt.ylabel('Average Sales')
plt.xticks(rotation=90)
plt.show()

merged_df = pd.read_csv('merged-clean.csv')
# Calculate the average sales per genre per platform
avg_sales = merged_df[merged_df['Platform'] == 'XOne'].groupby('Genre')['Global_Sales'].mean()
# Convert the Series to a DataFrame, limit the number of decimals to 2
avg_sales = avg_sales.round(2).to_frame()
avg_sales = avg_sales.reset_index()

# Sort and get the top 5 platforms per genre
top_platforms = avg_sales.sort_values('Global_Sales', ascending=False).groupby('Genre').head(5)
# top_genres = avg_sales.nlargest(3, 'Global_Sales')
# print(top_genres)

# Create a bar plot
plt.figure(figsize=(10, 6))
barplot = sns.barplot(x='Global_Sales', y='Genre', data=avg_sales, errorbar=None)

# Display the values
for p in barplot.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height() / 2, '{:1.2f}'.format(width), va='center')

plt.xlabel('Average Sales (in millions)')
plt.ylabel('Genre')
plt.title('Average sales per genre on Xbox One')
plt.show()

# Filter the data for a specific platform, e.g., 'PS4'
platform_games = merged_df[merged_df['Platform'] == 'XOne']

# Create a boxplot
plt.figure(figsize=(10, 6))
sns.boxplot(x='Genre', y='Global_Sales', data=platform_games)

# Show the amount of data points per genre
sns.swarmplot(x='Genre', y='Global_Sales', data=platform_games, color=".25")

plt.title('Boxplot of Average Sales per Genre on Xbox')
plt.xlabel('Genre')
plt.ylabel('Average Sales')
plt.xticks(rotation=90)
plt.show()

# Filter the data for specific platforms
platform_games = merged_df[merged_df['Platform'].isin(['PS4', 'XOne', 'WiiU'])]

# Create a boxplot
plt.figure(figsize=(10, 6))
sns.boxplot(x='Genre', y='Global_Sales', hue='Platform', data=platform_games)

# Show the amount of data points per genre
sns.swarmplot(x='Genre', y='Global_Sales', hue='Platform', data=platform_games, dodge=True, size=3, palette='dark')

plt.title('Boxplot of Average Sales per Genre on PS4, XOne, and WiiU')
plt.xlabel('Genre')
plt.ylabel('Average Sales')
plt.xticks(rotation=90)
plt.legend(title='Platform')
plt.show()

platform_games = merged_df[merged_df['Platform'].isin((['XOne', 'PS4', 'WiiU']))]

average_sales = platform_games.groupby(['Platform', 'Genre'])['Global_Sales'].mean()

# Get the top 3 genres with highest average sales for each platform
top_3_genres = average_sales.groupby('Platform').nlargest(3)


print(top_3_genres.to_frame())

"""# Predictive
Using a random forest regressor to predict global sales based on the following factors:
- Genre
- Publisher
- Release Year
- Platform

Code for creating the model:
"""

le_genre = LabelEncoder()
le_publisher = LabelEncoder()
le_year = LabelEncoder()
le_platform = LabelEncoder()

merged_df = pd.read_csv('merged-clean.csv')

# Encode categorical variables
le = LabelEncoder()
merged_df['Genre'] = le.fit_transform(merged_df['Genre'])
merged_df['Publisher'] = le.fit_transform(merged_df['Publisher'])
merged_df['Year'] = le.fit_transform(merged_df['Year'])
merged_df['Platform'] = le.fit_transform(merged_df['Platform'])

# Define the features and the target
X = merged_df[['Genre', 'Publisher', 'Year', 'Platform']]
y = merged_df['Global_Sales']

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Use the model to make predictions
predictions = model.predict(X_test)

def predict_randomforest(genre, publisher, year, platform):
    # Define the new game
    new_game = pd.DataFrame({
        'Genre': [genre],
        'Publisher': [publisher],
        'Year': [year],
        'Platform': [platform]
    })

    # Transform the categorical variables into numerical form
    new_game['Genre'] = le.fit_transform(new_game['Genre'])
    new_game['Publisher'] = le.fit_transform(new_game['Publisher'])
    new_game['Year'] = le.fit_transform(new_game['Year'])
    new_game['Platform'] = le.fit_transform(new_game['Platform'])

    # Use the model to make a prediction
    predicted_sales = model.predict(new_game)

    print(f"The predicted global sales for the new game are: {predicted_sales[0]}")

merged_df = pd.read_csv('merged-clean.csv')

le = LabelEncoder()
merged_df['Genre'] = le_genre.fit_transform(merged_df['Genre'])
merged_df['Publisher'] = le_publisher.fit_transform(merged_df['Publisher'])
merged_df['Year'] = le_year.fit_transform(merged_df['Year'])
merged_df['Platform'] = le_platform.fit_transform(merged_df['Platform'])

# Define the features and the target
X = merged_df[['Genre', 'Publisher', 'Year', 'Platform']]
y = merged_df['Global_Sales']

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

def predict(genre, publisher, year, platform):
    # Define the new game
    new_game = pd.DataFrame({
        'Genre': [genre],
        'Publisher': [publisher],
        'Year': [year],
        'Platform': [platform]
    })

    # Transform the categorical variables into numerical form
    new_game['Genre'] = le_genre.transform(new_game['Genre'])
    new_game['Publisher'] = le_publisher.transform(new_game['Publisher'])
    new_game['Year'] = le_year.transform(new_game['Year'])
    new_game['Platform'] = le_platform.transform(new_game['Platform'])

    # Use the model to make a prediction
    predicted_sales = model.predict(new_game)

    print(f"The predicted global sales for the new game are: {predicted_sales[0]}")

preds = model.predict(X_test)
mean_squared_error(y_test, preds)

"""Predicting using the model"""

predict("Shooter", "Activision", 2014, 'XOne')
predict("Shooter", "Activision", 2014, "PS4")
predict("Shooter", "Activision", 2014, 'PS3')
predict("Shooter", "Activision", 2014, "X360")

"""# Prescriptive
Answer the question: Which platform should we choose to release a music game on?

The Wii has the most average sales at 3 million sales, with Xbox360 coming in closer with 1.43 million sales.
"""

merged_df = pd.read_csv('merged-clean.csv')

# Filter the data for the genre 'Music'
music_data = merged_df[merged_df['Genre'] == 'Platform']

# Get the average sales per platform
avg_sales_music = music_data.groupby('Platform')['Global_Sales'].mean().reset_index()

# Create a bar plot
plt.figure(figsize=(10, 6))
sns.barplot(x='Global_Sales', y='Platform', data=avg_sales_music, errorbar=None)

# Display the values
for p in plt.gca().patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height() / 2, '{:1.2f}'.format(width), va='center')

plt.xlabel('Average Sales')
plt.ylabel('Platform')
plt.title('Average Sales per Platform for Music Genre')
plt.show()

merged_df = pd.read_csv('merged-clean.csv')
# Filter the data for the genre 'Music'
genre_data = merged_df[merged_df['Genre'] == 'Shooter']

# Create a boxplot
plt.figure(figsize=(10, 6))
sns.boxplot(x='Global_Sales', y='Platform', data=genre_data)

# Overlay a stripplot on the boxplot to show the mean
sns.stripplot(x='Global_Sales', y='Platform', data=genre_data, color='black', size=5)

plt.xlabel('Sales')
plt.ylabel('Platform')
plt.title('Sales per Platform for Shooter Games')
plt.show()